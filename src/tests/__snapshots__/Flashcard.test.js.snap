// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flashcard should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Flashcard
    filteredCards={
      Array [
        Object {},
        Object {},
        Object {},
      ]
    }
    flashcard={Object {}}
    saveToStorage={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p
          className="question-counter"
        >
          Question 
          0
          /
          3
        </p>,
        <p
          className="flashcard-question"
        />,
        <div
          className="buttons-container"
        >
          <button
            className="buttons flashcard-buttons"
            onClick={[Function]}
            type="button"
          />
          <button
            className="buttons flashcard-buttons"
            onClick={[Function]}
            type="button"
          />
          <button
            className="buttons flashcard-buttons"
            onClick={[Function]}
            type="button"
          />
        </div>,
      ],
      "className": "Flashcard",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Question ",
            0,
            "/",
            3,
          ],
          "className": "question-counter",
        },
        "ref": null,
        "rendered": Array [
          "Question ",
          0,
          "/",
          3,
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "className": "flashcard-question",
        },
        "ref": null,
        "rendered": null,
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="buttons flashcard-buttons"
              onClick={[Function]}
              type="button"
            />,
            <button
              className="buttons flashcard-buttons"
              onClick={[Function]}
              type="button"
            />,
            <button
              className="buttons flashcard-buttons"
              onClick={[Function]}
              type="button"
            />,
          ],
          "className": "buttons-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "buttons flashcard-buttons",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "buttons flashcard-buttons",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "buttons flashcard-buttons",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p
            className="question-counter"
          >
            Question 
            0
            /
            3
          </p>,
          <p
            className="flashcard-question"
          />,
          <div
            className="buttons-container"
          >
            <button
              className="buttons flashcard-buttons"
              onClick={[Function]}
              type="button"
            />
            <button
              className="buttons flashcard-buttons"
              onClick={[Function]}
              type="button"
            />
            <button
              className="buttons flashcard-buttons"
              onClick={[Function]}
              type="button"
            />
          </div>,
        ],
        "className": "Flashcard",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Question ",
              0,
              "/",
              3,
            ],
            "className": "question-counter",
          },
          "ref": null,
          "rendered": Array [
            "Question ",
            0,
            "/",
            3,
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "className": "flashcard-question",
          },
          "ref": null,
          "rendered": null,
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="buttons flashcard-buttons"
                onClick={[Function]}
                type="button"
              />,
              <button
                className="buttons flashcard-buttons"
                onClick={[Function]}
                type="button"
              />,
              <button
                className="buttons flashcard-buttons"
                onClick={[Function]}
                type="button"
              />,
            ],
            "className": "buttons-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "buttons flashcard-buttons",
                "onClick": [Function],
                "type": "button",
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "buttons flashcard-buttons",
                "onClick": [Function],
                "type": "button",
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "buttons flashcard-buttons",
                "onClick": [Function],
                "type": "button",
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
